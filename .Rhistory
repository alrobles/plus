fit$plus$glmnet.fit
fit$plus$lambda
fit$pred_y
fit$plus
print(fit$plus)
print(fit$plus$lambda.min)
print(fit$plus$name)
fit$plus
fit
fit$predicted_coefficients
document()
document()
cvm
fit
fit$plus
fit$plus$cvm
fit$plus$cvm
document()
fit$plus$cvm$nzero
fit$plus$cvm$
fit$plus$cvm
fit$plus$nzero
document()
document()
document()
x <- matrix(rnorm(1000 * 20), 1000, 20)
y <- ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
print(fit)
fit <- plus(x, y)
print(fit)
predicted_coefficients
fit$predicted_coefficients
fit$predicted_coefficients
document()
x <- matrix(rnorm(1000 * 20), 1000, 20)
y <- ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
print(fit)
document()
#' @examples
x <- matrix(rnorm(1000 * 20), 1000, 20)
y <- ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
x_train <- matrix(rnorm(1000 * 20), 1000, 20)
x_test <- matrix(rnorm(1000 * 20), 1000, 20)
x_train <- matrix(rnorm(1000 * 20), 1000, 20)
x_test <- matrix(rnorm(1000 * 20), 1000, 20)
y_train <- ifelse(rnorm(1000) > 0, 1, 0)
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
fit
#' fit <- plus(x_train, y_train)
fit$plus$glmnet.fit
#' fit <- plus(x_train, y_train)
predict(fit$plus$glmnet.fit, newx = x_test)
#' fit <- plus(x_train, y_train)
predict(fit$plus$glmnet.fit, newx = x_test, type = "response")
#' x=matrix(rnorm(100*20),100,20)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
#' predict(fit1,type="coef")
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
#' predict(fit1,type="coef")
#' fit2=glmnet(x,g2,family="binomial")
fit2
(rnorm(100*20),100,20)
#' x=matrix(rnorm(100*20),100,20)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
predict
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
g2=sample(1:2,100,replace=TRUE)
g4=sample(1:4,100,replace=TRUE)
fit1=glmnet(x,y)
predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
predict(fit1,type="coef")
predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
fit2=glmnet(x,g2,family="binomial")
predict(fit2,type="response",newx=x[2:5,])
fit2
predicted_y <- stats::predict(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
fit2
fit2=glmnet(x,g2,family="binomial")
predict(fit2,type="response", newx = x[2:5,])
predicted_y <- stats::predict(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
predicted_y <- predict(fit2, newx = train.X, s = "lambda.min", type = 'response')
predict(fit2, newx = train.X, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = train.X, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,])
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min")
fit$plus$glmnet.fit
fit$plus$glmnet.fit
x_test
predicted_y <-  stats::predict(fit$plus$glmnet.fit, newx = x_test, s = "lambda.min", type = 'response')
predicted_y <-  stats::predict(fit$plus$glmnet.fit, newx = x_train, s = "lambda.min", type = 'response')
predict(fit$plus$glmnet.fit)
x_train
x_train
predict(fit$plus, newx = x_train )
predict(fit$plus, newx = x_test )
predict(fit$plus, newx = x_train )
predict(fit$plus, newx = x_test )
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
fit2
glmnet::predict.glmnet(fit2, newx = x[2:5,], type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "s0", type = 'response')
pred <- predict.cv.glmnet(fit2, newx = valid.x, s = "lambda.min", "response")
pred <- glmnet::predict.cv.glmnet(fit2, newx = valid.x, s = "lambda.min", "response")
pred <- glmnet::print.cv.glmnet(fit2, newx = valid.x, s = "lambda.min", "response")
x[2:5,]
pred <- glmnet::print.cv.glmnet(fit2, newx = x[2:5,], s = "lambda.min", "response")
fit2=cv.glmnet(x,g2,family="binomial")
pred <- glmnet::print.cv.glmnet(fit2, newx = x[2:5,], s = "lambda.min", "response")
pred <- glmnet::print.cv.glmnet(fit2, newx = x[2:5,], s = "lambda.min", "response")
fit2
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "s0", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "s0", type = 'response')
predict(fit2, newx = x[2:5,], s = "s0", type = 'response')
predict(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x
fit2=cv.glmnet(x_train,y_train,family="binomial")
fit2
fit2 cv.glmnet(x_train,y_train,family="binomial")
fit2 <- cv.glmnet(x_train,y_train,family="binomial")
fit2
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
x_train
fit2 <- cv.glmnet(x_train,y_train,family="binomial")
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
y_train
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x_test
predict(fit2, newx = x_ttrainest, s = "lambda.min", type = 'response')
predict(fit2, newx = x_train, s = "lambda.min", type = 'response')
fit2 <- cv.glmnet(x_train,y_train,family="binomial")
fit2 <- cv.glmnet(x_train, y_train, family="binomial")
cv.glmnet
fit2 <- cv.glmnet(x_train, y_train, family="binomial")
fit2
fit3 <- plus(x_train, y_train, family="binomial")
fit3 <- plus(x_train, y_train)
fit3
predict(fit3, newx = x_train, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit3, newx = x_train, s = "lambda.min", type = 'response')
stats::predict(fit3, newx = x_train, s = "lambda.min", type = 'response')
stats::predict(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet::predict(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet:::predict.cv.glmnet(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet:::predict.cv.glmnet(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
document()
glmnet:::predict.cv.glmnet
document()
document()
document()
document()
document()
document()
fit$plus
fit$plus$glmnet.fit
fit$plus
fit3$plus[[s]]
fit3$plus[["lambda.min"]]
names(fit3$plus[["lambda.min"]])
predict
use_package("stats")
document()
document()
library(devtools)
document()
document()
auc_matrix(p_class, p_response, weights = rep(1, 2*nrow(p_class)))
#' @examples
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
p_response <- predict(fit, newx = x_test)
p_class <- plus:::predict.plus(fit, newx = x_test, type = "class")
p_class <- as.data.frame(p_class)
auc_matrix(p_class, p_response, weights = rep(1, 2*nrow(p_class)))
p_class
p_response
rep(1, 2*nrow(p_class)
)
auc_matrix(p_class, p_response, weights = rep(1, 2*nrow(p_class)))
Weights <- as.vector(weights*y)
weights
weights = rep(1, 2*nrow(p_class))\
weights = rep(1, 2*nrow(p_class))
y - p_class
y - p_class
y = p_class
Weights <- as.vector(weights*y)
Weights
weights
weights
y
ny <- nrow(y)
Y <- rep(c(0,1),c(ny,ny))
Prob <- c(prob, prob)
prob = p_class
Weights
weights
Y
Prob
Prob <- c(prob, prob)
Prob
Prob <- c(prob, prob)
p_response
prob = p_response
Prob <- c(prob, prob)
Prob
auc(y = Y, prob = Prob, w = Weights)
Weights
Weights
Weights$p_class
auc(y = Y, prob = Prob, w = Weights$p_class)
auc(y = Y, prob = Prob)
y
prob
y
?survival::concordance
weights = rep(1, nrow(p_class))
weights
Weights
p_class
p_class
p_class <- plus:::predict.plus(fit, newx = x_test, type = "class")
p_class
as.matrix(p_class)
auc_matrix(p_class, p_response)
document()
document()
auc(y = Y, prob = Prob, w = Weights)
document()
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
p <- predict(fit,newx = x_test)
plus_cv_lognet(p, y_test, type.measure = "auc")
type.measures
type.measures = c("deviance", "class", "auc", "mse", "mae")
# subclass = switch(binomial="lognet")
#
# fun = paste("cv", subclass, sep = ".")
# if(subclass=="coxnet")fun="assess.coxnet"
outlist=as.list(type.measures)
outlist
names(outlist)=type.measures
outlist
type.measure
cvtype
glmnet::cvtype
glmnet:::cvtype
type.measure
glmnet:::cvtype("mse", "lognet")
type.measure
type.measures
type.measure
type.measures
type.measures
type.measure
weights
fun
weights
foldid
p
y_test
predmat
cvraw
cvraw
glmnet::cvraw
weighted.mean
stats::weighted.mean
document()
document()
document()
document()
document()
document)
document()
document()
document()
document()
document()
document()
document()
document()
document()
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
assess_plus(fit, newx = x_test, newy = y_test)
fit$plus
x_test
glmnet::assess.glmnet(fit$plus, newx = x_test, newy = y_test)
asses2 <- glmnet::assess.glmnet(fit$plus, newx = x_test, newy = y_test)
asses1 <- assess_plus(fit, newx = x_test, newy = y_test)
asses1 <- assess_plus(fit, newx = x_test, newy = y_test)
asses2 <- glmnet::assess.glmnet(fit$plus, newx = x_test, newy = y_test)
asses1
asses1$deviance
asses2$deviance
asses1$deviance
asses2$deviance
asses1$class
asses2$class
asses1$class
asses2$class
asses1$auc
asses2$auc
asses1$auc
asses2$auc
asses1$auc
asses2$auc
asses2
asses1$mse
asses2$mae
asses2
asses1$mae
asses2$mae
asses1$mae
asses2$mae
asses1
fit$plus
fit$plus$glmnet.fit
asses1 <- assess_plus(fit, newx = x_test, newy = y_test)
asses2 <- glmnet::assess.glmnet(fit$plus$glmnet.fit, newx = x_test, newy = y_test)
asses1$deviance
asses2$deviance
asses1$class
asses2$class
asses1$class
asses1$auc
asses2$auc
asses1$auc
asses2$auc
asses1$mse
asses2$mae
asses1$mae
asses2$mae
asses2 <- glmnet::assess.glmnet(fit$plus$glmnet.fit, newx = x_test, s = "lambda.min",  newy = y_test)
asses2
fit$plus
glmnet.fit
fit$plus$glmnet.fit
fit$plus
asses2 <- glmnet::assess.glmnet(fit$plus, newx = x_test, newy = y_test)
asses2
fit$plus
?glmnet::assess.glmnet
glmnet::assess.glmnet
asses1 <- assess_plus(fit, newx = x_test, newy = y_test)
asses2 <- glmnet::assess.glmnet(fit$plus, newx = x_test, newy = y_test, )
asses1
outlist
measure
measure
document()
confusion.glmnet
glmnet::confusion.glmnet
usethis::use_readme_rmd()
document()
usethis::use_readme_md()
document()
check()
document()
usethis::use_readme_md()
document()
document()
document()\
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
fit
assess(fit, newx = x_test, newy = y_test)
doccu
docu
document()
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
assess(fit, newx = x_test, newy = y_test)
assess
assess.plus(fit, newx = x_test, newy = y_test)
assess
assess(fit, newx = x_test, newy = y_test)
document()
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
assess(fit, newx = x_test, newy = y_test)
assess(fit, newx = x_test, newy = y_test)
assess
assess.plus(fit, newx = x_test, newy = y_test)
fit
assess(fit, newx = x_test, newy = y_test)
document()
document()
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
assess(fit, newx = x_test, newy = y_test)
assess(fit, newx = x_test, newy = y_test)
fit <- plus(x_train, y_train)
assess(fit, newx = x_test, newy = y_test)
assess(fit, newx = x_test, newy = y_test)
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_github_pages()
pkgdown::build_site_github_pages()
pkgdown::deploy_site_github()
lacs
binexample
binexample
usethis::use_readme_rmd()
plus::get_auc(fit, x_test, y_test)
devtools::install_github("alrobles/plus")
devtools::install_github("alrobles/plus")
get_auc
devtools::install_github("alrobles/plus")
