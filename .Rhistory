document()
Matrix
Matrix::Matrix
document()
fit_plus_example
new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
document()
document()
predicted_y
predicted_y_example
document()
document()
predicted_coefficients
class(predicted_coefficients)
predicted_coefficients_example
new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
predicted_coefficients_example
new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
predicted_coefficients_example
class(predicted_coefficients_example)
class(predicted_coefficients_example) == "dgCMatrix"
predicted_coefficients_example
is.matrix(predicted_coefficients_example)
document()
document()
use_package("Matrix")
use_package("Matrix")
document()
predicted_coefficients
Matrix::Matrix(predicted_coefficients)
Matrix::Matrix(predicted_coefficients)
Matrix::Matrix(predicted_coefficients)
predicted_coefficients
predicted_coefficients
Matrix::spMatrix(predicted_coefficients)
(predicted_coefficients)
Matrix::MatrixClass(predicted_coefficients)
Matrix::MatrixClass()
predicted_coefficients
predicted_coefficients
Matrix::MatrixClass(cl = "dgCMatrix", predicted_coefficients)
Matrix::MatrixClass(cl = "dgCMatrix", predicted_coefficients)
?Matrix::MatrixClass
MatrixClass(predicted_coefficients)
MatrixClass(predicted_coefficients)
MatrixClass("predicted_coefficients")
MatrixClass("predicted_coefficients")
(M <- Matrix(c(0,1,0,0), 6, 4))
M
predicted_coefficients
Matrix(predicted_coefficients)
Matrix(predicted_coefficients, )
class(predicted_coefficients)
class(Matrix(predicted_coefficients))
Matrix::sparseMatrix()
Matrix::sparseMatrix(predicted_coefficients)
Matrix:::as.matrix.Matrix(predicted_coefficients)
Matrix::Matrix()
Matrix::Matrix(1:4)
Matrix::Matrix(1:6)
?Matrix::Matrix
Matrix(0, nrow, ncol)
predicted_coefficients
as(predicted_coefficients, "CsparseMatrix")
as(predicted_coefficients, "CsparseMatrix")
is(predicted_coefficients)
is(predicted_coefficients, dgCMatrix)
is(predicted_coefficients, "dgCMatrix")
is(predicted_coefficients, "dgCMatrix")
is(predicted_coefficients, "dgCMatrix")
is
is(predicted_coefficients, "dgCMatrix")
Matrix(predicted_coefficients)
Matrix(predicted_coefficients, sparse = TRUE)
document()
variables <- 5
x = matrix(rnorm(1000 * 5), 1000, 5)
y = ifelse(rnorm(1000) > 0, 1, 0)
mod <- PLUS_test(train_data = x, Label.obs =  y )
mod
new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
plus_object_test <- new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
class(plus_object_test)
use_data(plus_object_test)
plus_object_example <- new_plus(fit_plus = fit_plus_example,
pred_y = predicted_y_example,
cutoff = cutoff_example,
predicted_coefficients = predicted_coefficients_example)
use_data(plus_object_example)
data(plus_object_example)
document()
values
plus_object
plus_object
plus_object_example
unclass(plus_object_example)
val <- unclass(plus_object_example)
val
val
val$plus
val$plus
plus_object
plus_object_example
attr(plus_object_example)
class(plus_object_example)
values
val$plus
class(val$plus)
val$pred_y
val$cutoff
is.numeric(val$cutoff)
values
val$predicted_coefficients
docu
devtools::document()
devtools::document()
train_data
Label.obs
train_data
train.X
Label.obs
y
fit_plus
fit_plus_example
predicted_coefficients
document()
devtools::document()
train_data
Label.obs
use_data(train_data)
train_data
document()
devtools::document()
usethis::use_package("glmnet")
library(devtools)
document()
document()
usethis::use_package("glmnet")
validate_plus(plus_model)
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
x
y
plus(x, y)
plus(x, y)
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
plus(x, y)
plus(x, y)
plus(x, y)
plus(x, y)
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(1000 * 5), 1000, 5)
y = ifelse(rnorm(1000) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(1000 * 5), 1000, 5)
y = ifelse(rnorm(1000) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(1000 * 5), 1000, 5)
y = ifelse(rnorm(1000) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(10000 * 5), 1000, 5)
y = ifelse(rnorm(10000) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(10000 * 5), 10000, 5)
y = ifelse(rnorm(10000) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(10000 * 10), 10000, 10)
y = ifelse(rnorm(10000) > 0, 1, 0)
plus(x, y)
plus_fit <- plus(x, y)
plus_fit
plus_fit
plus_fit
data(QuickStartExample)
x <- QuickStartExample$x
y <- QuickStartExample$y
fit <- glmnet(x, y)
library(glmnet)
fit <- glmnet(x, y)
fit
print(fit)
fit
x <- QuickStartExample$x
y <- QuickStartExample$y
fit <- glmnet(x, y)
fit
print(fit)
fit <- lm(x, y)
fit <- lm(y~x)
fit
print(fit)
fit <- glmnet(x, y)
fit
fit
fit_plus <- plus(x, y)
x = matrix(rnorm(10000 * 10), 10000, 10)
y = ifelse(rnorm(10000) > 0, 1, 0)
plus_fit <- plus(x, y)
x = matrix(rnorm(1000 * 10), 1000, 10)
y = ifelse(rnorm(1000) > 0, 1, 0)
plus_fit <- plus(x, y)
plus_fit
plus_fit$plus
plus_fit$predicted_coefficients
plus_fit$pred_y
plus_fit$cutoff
plus_fit$plus
plus_fit$plus
plus_fit$plus$glmnet.fit
plus_fit$plus$glmnet.fit
plus_fit$predicted_coefficients
plus_fit$plus
plus_fit$predicted_coefficients
fit
fit$call
fit$call
fit$call
fit$call
deparse(x$call)
deparse(fit$call)
fit
fit$call
fit$call
fit <- glmnet(x, y)
fit
fit$call
match.call()
match.call()
match.call
match.call()
plus_object_example
document()
document()
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
plus(x, y)
plus(x, y)
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
plus(x, y)
plus(x, y)
plus(x, y)
x = matrix(rnorm(100 * 5), 100, 5)
y = ifelse(rnorm(100) > 0, 1, 0)
plus(x, y)
x = matrix(rnorm(1000 * 5), 1000, 5)
y = ifelse(rnorm(1000) > 0, 1, 0)
plus(x, y)
document()
check()
x = matrix(rnorm(1000 * 5), 1000, 5)
y = ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
fit
fit$predicted_coefficients
fit$plus
fit$plus$glmnet.fit
fit$plus$lambda
fit$pred_y
fit$plus
print(fit$plus)
print(fit$plus$lambda.min)
print(fit$plus$name)
fit$plus
fit
fit$predicted_coefficients
document()
document()
cvm
fit
fit$plus
fit$plus$cvm
fit$plus$cvm
document()
fit$plus$cvm$nzero
fit$plus$cvm$
fit$plus$cvm
fit$plus$nzero
document()
document()
document()
x <- matrix(rnorm(1000 * 20), 1000, 20)
y <- ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
print(fit)
fit <- plus(x, y)
print(fit)
predicted_coefficients
fit$predicted_coefficients
fit$predicted_coefficients
document()
x <- matrix(rnorm(1000 * 20), 1000, 20)
y <- ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
print(fit)
document()
#' @examples
x <- matrix(rnorm(1000 * 20), 1000, 20)
y <- ifelse(rnorm(1000) > 0, 1, 0)
fit <- plus(x, y)
x_train <- matrix(rnorm(1000 * 20), 1000, 20)
x_test <- matrix(rnorm(1000 * 20), 1000, 20)
x_train <- matrix(rnorm(1000 * 20), 1000, 20)
x_test <- matrix(rnorm(1000 * 20), 1000, 20)
y_train <- ifelse(rnorm(1000) > 0, 1, 0)
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
fit <- plus(x_train, y_train)
fit
#' fit <- plus(x_train, y_train)
fit$plus$glmnet.fit
#' fit <- plus(x_train, y_train)
predict(fit$plus$glmnet.fit, newx = x_test)
#' fit <- plus(x_train, y_train)
predict(fit$plus$glmnet.fit, newx = x_test, type = "response")
#' x=matrix(rnorm(100*20),100,20)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
#' predict(fit1,type="coef")
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
#' predict(fit1,type="coef")
#' fit2=glmnet(x,g2,family="binomial")
fit2
(rnorm(100*20),100,20)
#' x=matrix(rnorm(100*20),100,20)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' x=matrix(rnorm(100*20),100,20)
#' y=rnorm(100)
#' g2=sample(1:2,100,replace=TRUE)
#' g4=sample(1:4,100,replace=TRUE)
#' fit1=glmnet(x,y)
#' predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
predict
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
g2=sample(1:2,100,replace=TRUE)
g4=sample(1:4,100,replace=TRUE)
fit1=glmnet(x,y)
predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
predict(fit1,type="coef")
predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
fit2=glmnet(x,g2,family="binomial")
predict(fit2,type="response",newx=x[2:5,])
fit2
predicted_y <- stats::predict(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
fit2
fit2=glmnet(x,g2,family="binomial")
predict(fit2,type="response", newx = x[2:5,])
predicted_y <- stats::predict(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
predicted_y <- predict(fit2, newx = train.X, s = "lambda.min", type = 'response')
predict(fit2, newx = train.X, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = train.X, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,])
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min")
fit$plus$glmnet.fit
fit$plus$glmnet.fit
x_test
predicted_y <-  stats::predict(fit$plus$glmnet.fit, newx = x_test, s = "lambda.min", type = 'response')
predicted_y <-  stats::predict(fit$plus$glmnet.fit, newx = x_train, s = "lambda.min", type = 'response')
predict(fit$plus$glmnet.fit)
x_train
x_train
predict(fit$plus, newx = x_train )
predict(fit$plus, newx = x_test )
predict(fit$plus, newx = x_train )
predict(fit$plus, newx = x_test )
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
fit2
glmnet::predict.glmnet(fit2, newx = x[2:5,], type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "s0", type = 'response')
pred <- predict.cv.glmnet(fit2, newx = valid.x, s = "lambda.min", "response")
pred <- glmnet::predict.cv.glmnet(fit2, newx = valid.x, s = "lambda.min", "response")
pred <- glmnet::print.cv.glmnet(fit2, newx = valid.x, s = "lambda.min", "response")
x[2:5,]
pred <- glmnet::print.cv.glmnet(fit2, newx = x[2:5,], s = "lambda.min", "response")
fit2=cv.glmnet(x,g2,family="binomial")
pred <- glmnet::print.cv.glmnet(fit2, newx = x[2:5,], s = "lambda.min", "response")
pred <- glmnet::print.cv.glmnet(fit2, newx = x[2:5,], s = "lambda.min", "response")
fit2
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "s0", type = 'response')
glmnet::predict.glmnet(fit2, newx = x[2:5,], s = "s0", type = 'response')
predict(fit2, newx = x[2:5,], s = "s0", type = 'response')
predict(fit2, newx = x[2:5,], s = "lambda.min", type = 'response')
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x
fit2=cv.glmnet(x_train,y_train,family="binomial")
fit2
fit2 cv.glmnet(x_train,y_train,family="binomial")
fit2 <- cv.glmnet(x_train,y_train,family="binomial")
fit2
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
x_train
fit2 <- cv.glmnet(x_train,y_train,family="binomial")
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x_train <- matrix(rnorm(650 * 20), 650, 20)
x_test  <- matrix(rnorm(350 * 20), 350, 20)
y_train <- ifelse(rnorm(650) > 0, 1, 0)
y_test  <- ifelse(rnorm(350) > 0, 1, 0)
y_train
predict(fit2, newx = x_test, s = "lambda.min", type = 'response')
x_test
predict(fit2, newx = x_ttrainest, s = "lambda.min", type = 'response')
predict(fit2, newx = x_train, s = "lambda.min", type = 'response')
fit2 <- cv.glmnet(x_train,y_train,family="binomial")
fit2 <- cv.glmnet(x_train, y_train, family="binomial")
cv.glmnet
fit2 <- cv.glmnet(x_train, y_train, family="binomial")
fit2
fit3 <- plus(x_train, y_train, family="binomial")
fit3 <- plus(x_train, y_train)
fit3
predict(fit3, newx = x_train, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit3, newx = x_train, s = "lambda.min", type = 'response')
stats::predict(fit3, newx = x_train, s = "lambda.min", type = 'response')
stats::predict(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet::predict(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet::predict.glmnet(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet:::predict.cv.glmnet(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
glmnet:::predict.cv.glmnet(fit3$plus, newx = x_train, s = "lambda.min", type = 'response')
document()
glmnet:::predict.cv.glmnet
document()
document()
document()
document()
document()
document()
fit$plus
fit$plus$glmnet.fit
fit$plus
fit3$plus[[s]]
fit3$plus[["lambda.min"]]
names(fit3$plus[["lambda.min"]])
predict
use_package("stats")
document()
document()
